/*
 * BOAVIZTAPI - DEMO
 *
 * # üéØ Retrieving the impacts of digital elements This is a quick demo, to see full documentation [click here](http://api.boavizta.org)  ## ‚û°Ô∏èServer router  ### Server routers support the following impacts:  | Impact | üî® Manufacture | üîå Usage | |--------|----------------|----------| |   GWP  |        X       |     X    | |   ADP  |        X       |     X    | |   PE   |        X       |     X    | ## ‚û°Ô∏èCloud router  ### Cloud routers support the following impacts:  | Impact | üî® Manufacture | üîå Usage | |--------|----------------|----------| |   GWP  |        X       |     X    | |   ADP  |        X       |     X    | |   PE   |        X       |     X    | ## ‚û°Ô∏èComponent router  ### Component routers support the following impacts:  | Impact | üî® Manufacture | üîå Usage | |--------|----------------|----------| |   GWP  |        X       |          | |   ADP  |        X       |          | |   PE   |        X       |          |
 *
 * The version of the OpenAPI document: 0.1.1
 *
 * Generated by: https://openapi-generator.tech
 */
// Allowing non_snake_case, because code is generated, we cannot easily control the name of the 'TYPE' field.
#[allow(non_snake_case)]
#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UsageServer {
    #[serde(rename = "hash", skip_serializing_if = "Option::is_none")]
    pub hash: Option<String>,
    #[serde(rename = "TYPE", skip_serializing_if = "Option::is_none")]
    pub TYPE: Option<String>,
    #[serde(rename = "years_use_time", skip_serializing_if = "Option::is_none")]
    pub years_use_time: Option<f32>,
    #[serde(rename = "days_use_time", skip_serializing_if = "Option::is_none")]
    pub days_use_time: Option<f32>,
    #[serde(rename = "hours_use_time", skip_serializing_if = "Option::is_none")]
    pub hours_use_time: Option<f32>,
    #[serde(
        rename = "hours_electrical_consumption",
        skip_serializing_if = "Option::is_none"
    )]
    pub hours_electrical_consumption: Option<f32>,
    #[serde(rename = "usage_location", skip_serializing_if = "Option::is_none")]
    pub usage_location: Option<String>,
    #[serde(rename = "gwp_factor", skip_serializing_if = "Option::is_none")]
    pub gwp_factor: Option<f32>,
    #[serde(rename = "pe_factor", skip_serializing_if = "Option::is_none")]
    pub pe_factor: Option<f32>,
    #[serde(rename = "adp_factor", skip_serializing_if = "Option::is_none")]
    pub adp_factor: Option<f32>,
    #[serde(rename = "max_power", skip_serializing_if = "Option::is_none")]
    pub max_power: Option<f32>,
    #[serde(rename = "workload", skip_serializing_if = "Option::is_none")]
    pub workload:
        Option<::std::collections::HashMap<String, ::std::collections::HashMap<String, f32>>>,
}

impl UsageServer {
    pub fn new() -> UsageServer {
        UsageServer {
            hash: None,
            TYPE: None,
            years_use_time: None,
            days_use_time: None,
            hours_use_time: None,
            hours_electrical_consumption: None,
            usage_location: None,
            gwp_factor: None,
            pe_factor: None,
            adp_factor: None,
            max_power: None,
            workload: None,
        }
    }
}
